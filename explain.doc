// app.tsx
import React from 'react'; // Import React library for JSX support
import { useState, useEffect } from 'react' // Import React hooks for state and side effects
import { PersonForm } from './components/PersonForm'; // Import custom form component
import { FilteredPersons } from './components/filter'; // Import custom list display component
import PhoneBookService from './services/phoneBook' // Import API service for backend communication

// Define TypeScript interface for Button component props
type ButtonProps = {
  text: string; // Button display text
  type?: 'button' | 'submit'; // HTML button type (optional, defaults to 'button')
  onClick?: () => void; // Click handler function (optional)
  variant?: 'primary' | 'secondary' | 'danger'; // Visual style variant (optional)
  size?: 'sm' | 'md' | 'lg'; // Button size variant (optional)
}

// Define TypeScript interface for Person data structure
export type Person = {
  name: string; // Person's full name
  number: string; // Person's phone number (stored as string)
  id: number; // Unique identifier for database operations
};

// Reusable Button component with multiple style variants
export const Button = ({type = 'button', text, onClick, variant = 'primary', size = 'md'}: ButtonProps) => {
  // Base CSS classes applied to all buttons (transitions, focus states, etc.)
  const baseClasses = "font-medium rounded-lg transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2 active:scale-95";
  
  // CSS classes for different visual variants (primary blue, secondary gray, danger red)
  const variantClasses = {
    primary: "bg-blue-600 hover:bg-blue-700 text-white shadow-sm focus:ring-blue-500",
    secondary: "bg-gray-100 hover:bg-gray-200 text-gray-700 border border-gray-300 focus:ring-gray-400",
    danger: "bg-red-500 hover:bg-red-600 text-white shadow-sm focus:ring-red-500"
  };
  
  // CSS classes for different button sizes
  const sizeClasses = {
    sm: "px-3 py-1.5 text-sm",
    md: "px-4 py-2 text-sm",
    lg: "px-6 py-3 text-base"
  };

  // Return button element with combined CSS classes
  return (
    <button 
      type={type} // Set HTML button type (button/submit)
      onClick={onClick} // Attach click event handler
      className={`${baseClasses} ${variantClasses[variant]} ${sizeClasses[size]}`} // Combine all CSS classes
    >
      {text} {/* Display button text */}
    </button>
  );
};

// Main App component - root component of the application
const App = () => {
  // State: Array of Person objects, initialized with sample data
  const [persons, setPersons] = useState<Person[]>([
    { name: 'Arto Hellas', number: '040-123456', id: 1 }, // Sample person 1
    { name: 'Ada Lovelace', number: '39-44-5323523', id: 2 }, // Sample person 2
    { name: 'Dan Abramov', number: '12-43-234345', id: 3 }, // Sample person 3
    { name: 'Mary Poppendieck', number: '39-23-6423122', id: 4 } // Sample person 4
  ]) 
  // State: Current value of name input field
  const [newName, setNewName] = useState('');
  // State: Current value of phone number input field
  const [newNumber, setNewNumber] = useState<string>('');
  // State: Current search filter text
  const [search, setSearch] = useState('');
  // State: Current notification message (null when no notification)
  const [notification, setNotification] = useState<string | null>(null);

  // Helper function to display temporary notifications
  const showNotification = (message: string) => {
    setNotification(message); // Set the notification message
    setTimeout(() => { // Set timer to clear notification after 5 seconds
      setNotification(null); // Clear notification after delay
    }, 5000); // 5000ms = 5 seconds
  };

  // Effect hook: Runs once when component mounts to fetch data from backend
  useEffect(() => {
    PhoneBookService.getAll().then((initialPersons) => { // Call API to get all persons
      setPersons(initialPersons); // Update state with fetched data
    });
  }, []); // Empty dependency array = run only once on mount

  // Form submission handler for adding new contacts
  const addNewObjects = (event:  React.FormEvent<HTMLFormElement>) => {
    event.preventDefault(); // Prevent default form submission behavior

    const trimmedName = newName.trim(); // Remove whitespace from name input
    const parsedNumber = parseInt(newNumber) // Convert string number to integer

    // Validation: Check if name contains any digits
    if (/\d/.test(trimmedName)) {
      alert("Name cannot contain numbers"); // Show error message
      return; // Exit function early
    }

    // Validation: Check if number contains only digits
    if (!/^\d+$/.test(newNumber)) {
      alert("Number must contain only digits"); // Show error message
      return; // Exit function early
    }

    // Validation: Check if parsed number is valid and name is not empty
    if (isNaN(parsedNumber) || trimmedName === '') return; // Exit if invalid

    // Check if exact same person (name + number) already exists
    const exists = persons.some(
      (p) => 
        p.name.toLowerCase() === trimmedName.toLocaleLowerCase() && p.number === parsedNumber.toString()
    );

    // If exact duplicate exists, show alert and exit
    if (exists) {
      alert(`${trimmedName} ${parsedNumber} is already added to phonebook`);
      return;
    }

    // Check if person with same name (but different number) exists
    const existingPerson = persons.find(
      (p) => p.name.toLowerCase() === trimmedName.toLowerCase()
    );

    // If name exists with different number, ask user if they want to update
    if (existingPerson) {
      const confirmReplace = window.confirm(
        `${trimmedName} is already in the phonebook. Replace the old number with the new one?`
      );

      // If user confirms update
      if (confirmReplace) {
        const updatedEntry = { // Create updated person object
          ...existingPerson, // Keep existing properties
          number: parsedNumber.toString(), // Update with new number
        };

        // Call API to update existing person
        PhoneBookService.update(existingPerson.id, updatedEntry)
          .then((returnedPerson) => { // On successful update
            setPersons((prev) => // Update local state
              prev.map((p) => // Map through all persons
                p.id === existingPerson.id ? returnedPerson : p // Replace updated person
              )
            );
            setNewName(''); // Clear name input field
            setNewNumber(''); // Clear number input field
          })
          .catch((error) => { // On error
            console.error('Error updating person:', error); // Log error to console
          });
      }
      return; // Exit function
    }

    // Create new person object for API call
    const newEntry = {
      name: newName, // Use original name (not trimmed for display)
      number: newNumber, // Use original number string
    };

    // Call API to create new person
    PhoneBookService.create(newEntry)
      .then((returnedPerson) => { // On successful creation
        setPersons((prev) => [...prev, returnedPerson]); // Add new person to state
        setNewName(''); // Clear name input field
        setNewNumber(''); // Clear number input field
        showNotification(`${returnedPerson.name} was added to the phonebook`); // Show success notification
      })
      .catch((error) => { // On error
        console.error('Error creating entry:', error); // Log error to console
      });
  }

  // Function to update existing person (called from edit functionality)
  const handleUpdate = (id: number, updatedEntry: Person) => {
    PhoneBookService.update(id, updatedEntry) // Call API to update person
      .then((returnedPerson) => { // On successful update
        setPersons((prev) => // Update local state
          prev.map((p) => (p.id === id ? returnedPerson : p)) // Replace updated person
        );
      })
      .catch((error) => { // On error
        console.error('Error updating person:', error); // Log error to console
      });
  };

  // Function to delete person (called from delete button)
  const handleDelete = (id: number) => {
    const person = persons.find((p) => p.id === id); // Find person to delete
    const confirm = window.confirm(`Delete ${person?.name}?`); // Ask for confirmation

    // If user confirms and person exists
    if (confirm && person) {
      PhoneBookService.remove(id) // Call API to delete person
        .then(() => { // On successful deletion
          setPersons((prev) => prev.filter((p) => p.id !== id)); // Remove person from state
          showNotification(`${person.name} was deleted from the phonebook`); // Show success notification
        })
        .catch((error) => { // On error
          console.error('Error deleting person:', error); // Log error to console
        });
    }
  };

  // Function to handle inline editing via prompt (called from edit button)
  const handleUpdatePrompt = (id: number) => {
    const person = persons.find((p) => p.id === id); // Find person to edit
    if (!person) return; // Exit if person not found

    // Show prompt dialog with current number as default value
    const newNumber = prompt(`Update number for ${person.name}:`, person.number);

    if (!newNumber || newNumber.trim() === '') return; // Exit if no input or empty

    // Check if new number is same as current
    if (newNumber === person.number) {
      alert("That number is already the current number.");
      return;
    }

    // Check if new number is already used by another person
    const duplicate = persons.find(
      (p) => p.number === newNumber && p.id !== id
    );

    // If duplicate found, show error and exit
    if (duplicate) {
      alert(`Number ${newNumber} is already used by ${duplicate.name}.`);
      return;
    }

    // Ask for confirmation before updating
    const confirm = window.confirm(
      `Are you sure you want to update ${person.name}'s number from ${person.number} to ${newNumber}?`
    );

    // If confirmed, perform update
    if (confirm) {
      const updated = { ...person, number: newNumber }; // Create updated person object
      handleUpdate(id, updated); // Call update function
    }
  };

  // Render the main application UI
  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100"> {/* Full screen container with gradient background */}
      {/* Mobile Header - sticky header at top of screen */}
      <div className="bg-white shadow-sm border-b border-gray-200 sticky top-0 z-10">
        <div className="px-4 py-6 sm:px-6"> {/* Responsive padding */}
          <div className="flex items-center justify-center"> {/* Center header content */}
            <div className="flex items-center space-x-3"> {/* Horizontal layout with spacing */}
              <div className="w-10 h-10 bg-blue-600 rounded-full flex items-center justify-center"> {/* App icon circle */}
                <span className="text-white text-lg font-semibold">📱</span> {/* Phone emoji icon */}
              </div>
              <h1 className="text-2xl font-bold text-gray-900">Phonebook</h1> {/* App title */}
            </div>
          </div>
        </div>
      </div>

      {/* Main Content - centered container with max width */}
      <div className="px-4 py-6 sm:px-6 max-w-md mx-auto space-y-6">
        
        {/* Conditional Notification - only show if notification state has value */}
        {notification && (
          <div className="bg-green-50 border border-green-200 text-green-800 px-4 py-3 rounded-xl shadow-sm animate-pulse"> {/* Green notification card */}
            <div className="flex items-center space-x-2"> {/* Horizontal layout */}
              <span className="text-green-600">✓</span> {/* Checkmark icon */}
              <span className="text-sm font-medium">{notification}</span> {/* Notification text */}
            </div>
          </div>
        )}

        {/* Search Card - container for search functionality */}
        <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-4">
          <div className="flex items-center space-x-3 mb-3"> {/* Header with icon and title */}
            <span className="text-gray-500">🔍</span> {/* Search icon */}
            <h2 className="text-lg font-semibold text-gray-900">Search Contacts</h2> {/* Section title */}
          </div>
          <div className="relative"> {/* Relative positioning for clear button */}
            <input
              type="text" // Text input type
              placeholder="Search by name or number..." // Placeholder text
              value={search} // Controlled input - value from state
              onChange={(e) => setSearch(e.target.value)} // Update search state on change
              className="w-full px-4 py-3 bg-gray-50 border border-gray-200 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent outline-none transition-all duration-200 text-gray-900 placeholder-gray-500" // Styled input
            />
            {/* Conditional clear button - only show if search has value */}
            {search && (
              <button
                onClick={() => setSearch('')} // Clear search on click
                className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600" // Positioned inside input
              >
                ✕ {/* X symbol for clear */}
              </button>
            )}
          </div>
        </div>

        {/* Add Contact Card - container for new contact form */}
        <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-4">
          <div className="flex items-center space-x-3 mb-4"> {/* Header section */}
            <span className="text-gray-500">➕</span> {/* Plus icon */}
            <h2 className="text-lg font-semibold text-gray-900">Add New Contact</h2> {/* Section title */}
          </div>
          {/* PersonForm component - handles form inputs and submission */}
          <PersonForm
            newName={newName} // Pass name state
            setNewName={setNewName} // Pass name setter
            newNumber={newNumber} // Pass number state
            setNewNumber={setNewNumber} // Pass number setter
            onSubmit={addNewObjects} // Pass form submission handler
          />
        </div>

        {/* Contacts List Card - container for displaying contacts */}
        <div className="bg-white rounded-xl shadow-sm border border-gray-200 overflow-hidden">
          <div className="px-4 py-3 bg-gray-50 border-b border-gray-200"> {/* List header */}
            <div className="flex items-center justify-between"> {/* Space between title and count */}
              <div className="flex items-center space-x-3"> {/* Title section */}
                <span className="text-gray-500">👥</span> {/* People icon */}
                <h2 className="text-lg font-semibold text-gray-900">Contacts</h2> {/* Section title */}
              </div>
              {/* Dynamic count badge showing filtered results */}
              <span className="text-sm text-gray-500 bg-gray-200 px-2 py-1 rounded-full">
                {persons.filter(person => { // Count filtered persons
                  if (!search) return true; // If no search, include all
                  return `${person.name} ${person.number}`.toLowerCase().includes(search.toLowerCase()); // Filter by name or number
                }).length} {/* Display count */}
              </span>
            </div>
          </div>
          {/* FilteredPersons component - displays filtered list of contacts */}
          <FilteredPersons
            persons={persons} // Pass all persons
            search={search} // Pass search filter
            onEdit={handleUpdatePrompt} // Pass edit handler
            handleDelete={handleDelete} // Pass delete handler
          />
        </div>
      </div>
    </div>
  );
}

export default App // Export App as default export

// phoneBook.ts - API service module for backend communication
import axios from 'axios' // Import axios for HTTP requests
import type { Person } from '../App' // Import Person type definition

const baseUrl = 'http://localhost:3001/persons' // Base URL for API endpoints

// Function to fetch all persons from backend
const getAll = async (): Promise<Person[]> => {
  const request = axios.get<Person[]>(baseUrl) // Make GET request to fetch all persons
  const response = await request // Wait for response
  return response.data // Return the data array
}

// Function to create new person in backend
const create = async (newObject: Omit<Person, 'id'>): Promise<Person> => {
  const request = axios.post<Person>(baseUrl, newObject) // Make POST request with person data (without id)
  const res = await request // Wait for response
  return res.data // Return created person (with id assigned by backend)
}

// Function to update existing person in backend
const update = async (id: number, newObject: Person): Promise<Person> => {
  const request =  axios.put<Person>(`${baseUrl}/${id}`, newObject) // Make PUT request to specific person endpoint
  const res = await request // Wait for response
  return res.data // Return updated person data
}

// Function to delete person from backend
const remove = async (id: number): Promise<void> => {
  await axios.delete(`${baseUrl}/${id}`); // Make DELETE request to specific person endpoint, no return data needed
};

// Service object containing all API functions
const PhoneBookService = {
  getAll, // Export getAll function
  create, // Export create function
  update, // Export update function
  remove, // Export remove function
};

export default PhoneBookService; // Export service as default

// filter.tsx - Component for displaying filtered list of persons
import type { Person } from "../App"; // Import Person type
import { Button } from "../App"; // Import Button component

// Define props interface for FilteredPersons component
type FilteredPersonsProps = {
  persons: Person[]; // Array of all persons
  search: string; // Search filter string
  onEdit: (id: number) => void; // Function to call when edit button clicked
  handleDelete: (id: number) => void; // Function to call when delete button clicked
};

// FilteredPersons component - displays filtered list with edit/delete actions
export const FilteredPersons = ({ persons, search, onEdit, handleDelete }: FilteredPersonsProps) => {
  // Filter persons array based on search string
  const filtered = persons.filter((person) => {
    if (!search) return true; // If no search, include all persons
    return `${person.name} ${person.number}` // Combine name and number
      .toLowerCase() // Convert to lowercase for case-insensitive search
      .includes(search.toLowerCase()); // Check if search term is included
  });

  // If no results found, display empty state
  if (filtered.length === 0) {
    return (
      <div className="p-8 text-center"> {/* Centered empty state container */}
        <div className="text-gray-400 text-4xl mb-3">🔍</div> {/* Large search icon */}
        <p className="text-gray-500 text-sm">No contacts found</p> {/* Main message */}
        <p className="text-gray-400 text-xs mt-1">Try adjusting your search</p> {/* Helper text */}
      </div>
    );
  }

  // Render list of filtered persons
  return (
    <div className="divide-y divide-gray-100"> {/* Container with dividers between items */}
      {filtered.map((p, index) => ( // Map through filtered persons
        <div
          key={p.id} // Use person id as React key
          className={`p-4 transition-all duration-200 hover:bg-gray-50 ${ // Base styling with hover effect
            index === 0 ? 'rounded-t-xl' : '' // Round top corners for first item
          } ${index === filtered.length - 1 ? 'rounded-b-xl' : ''}`} // Round bottom corners for last item
        >
          <div className="flex items-center justify-between"> {/* Layout container */}
            <div className="flex items-center space-x-3 flex-1 min-w-0"> {/* Person info section */}
              <div className="w-10 h-10 bg-gradient-to-br from-blue-500 to-purple-600 rounded-full flex items-center justify-center flex-shrink-0"> {/* Avatar circle */}
                <span className="text-white text-sm font-semibold">
                  {p.name.charAt(0).toUpperCase()} {/* Display first letter of name as avatar */}
                </span>
              </div>
              <div className="flex-1 min-w-0"> {/* Person details container */}
                <p className="font-medium text-gray-900 truncate">{p.name}</p> {/* Person name */}
                <p className="text-sm text-gray-600">{p.number}</p> {/* Person number */}
              </div>
            </div>
            <div className="flex space-x-2 ml-4"> {/* Action buttons container */}
              <Button 
                text="Edit" // Button text
                onClick={() => onEdit(p.id)} // Call onEdit with person id
                variant="secondary" // Use secondary button style
                // size="sm" // Commented out - uses default medium size
              />
              <Button 
                text="Delete" // Button text
                onClick={() => handleDelete(p.id)} // Call handleDelete with person id
                variant="danger" // Use danger (red) button style
                size="sm" // Use small button size
              />
            </div>
          </div>
        </div>
      ))}
    </div>
  );
};

// PersonForm.tsx - Form component for adding new contacts
import { Button } from "../App"; // Import Button component

// Define props interface for PersonForm component
type PersonFormProps = {
  newName: string; // Current name input value
  setNewName: (value: string) => void; // Function to update name input
  newNumber: string; // Current number input value
  setNewNumber: (value: string) => void; // Function to update number input
  onSubmit: (event: React.FormEvent<HTMLFormElement>) => void; // Form submission handler
};

// PersonForm component - form for adding new contacts
export const PersonForm = ({
  newName,
  setNewName,
  newNumber,
  setNewNumber,
  onSubmit,
}: PersonFormProps) => {
  return (
    <form onSubmit={onSubmit} className="space-y-4"> {/* Form element with vertical spacing */}
      <div> {/* Name input container */}
        <label className="block text-sm font-medium text-gray-700 mb-2"> {/* Input label */}
          Full Name
        </label>
        <input
          placeholder="Enter full name" // Placeholder text
          value={newName} // Controlled input value from state
          onChange={(e) => setNewName(e.target.value)} // Update state on input change
          className="w-full px-4 py-3 bg-gray-50 border border-gray-200 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent outline-none transition-all duration-200 text-gray-900 placeholder-gray-500" // Styled input
        />
      </div>
      
      <div> {/* Number input container */}
        <label className="block text-sm font-medium text-gray-700 mb-2"> {/* Input label */}
          Phone Number
        </label>
        <input
          placeholder="Enter phone number" // Placeholder text
          value={newNumber} // Controlled input value from state
          onChange={(e) => setNewNumber(e.target.value)} // Update state on input change
          type="tel" // Tel input type for better mobile keyboards
          className="w-full px-4 py-3 bg-gray-50 border border-gray-200 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent outline-none transition-all duration-200 text-gray-900 placeholder-gray-500" // Styled input
        />
      </div>
      
      {/* Submit button */}
      <Button
        type="submit" // Submit type triggers form submission
        text="Add Contact" // Button text
        variant="primary" // Use primary (blue) button style
        size="lg" // Use large button size
      />
    </form>
  );
};